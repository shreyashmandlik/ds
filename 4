import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns


boston = pd.read_csv('HousingData.csv')
boston.head()

boston.isnull().sum()

boston.shape
boston.head(10)

boston['CHAS'].fillna(0.0,inplace=True)

np.where(boston['ZN']==0)

boston['CRIM'].fillna(boston['CRIM'].mean(),inplace=True)

boston['ZN'].fillna(0.0,inplace=True)

boston['INDUS'].mode()

np.where(boston['INDUS']==18.1)

boston['INDUS'].fillna(18.1,inplace=True)

boston.isnull().sum()

boston['AGE'].fillna(boston['AGE'].mean,inplace=True)

boston['LSTAT'].median()

boston['LSTAT'].fillna(11.53,inplace=True)

boston.isnull().sum()

boston.head()

sns.set(rc={'figure.figsize':(11,8)})
sns.distplot(boston['MEDV'],bins=30)
plt.show()

correlation_matrix = boston.corr().round(2)
sns.heatmap(data=correlation_matrix,annot=True,cbar=True)

plt.figure(figsize=(15,7))
features = ['LSTAT','RM']
target = boston['MEDV']

for i,col in enumerate(features):
  plt.subplot(1,len(features),i+1)
  x = boston[col]
  y = target
  plt.scatter(x,y,marker='o')
  plt.title(col)
  plt.xlabel(col)
  plt.ylabel("MEDV")

X = pd.DataFrame(np.c_[boston['LSTAT'],boston['RM']],columns=['LSTAT','RM'])
Y = boston['MEDV']

X.head()

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=5)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score, accuracy_score

lin_model = LinearRegression()
lin_model.fit(X_train,Y_train)

y_train_pred = lin_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(Y_train,y_train_pred)))
r2_score = r2_score(Y_train,y_train_pred)

print('FOR TRAINING DATA')
print('------MODEL PERFORMANCE-----')
print(f'RMSE SCORE: {rmse}')
print(f'R2 SCORE: {r2_score}')

y_test_predict = lin_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))
#r2 = r2_score(Y_test, y_test_predict)

print('FOR TESTING DATA')
print('------MODEL PERFORMANCE-----')
print(f'RMSE SCORE: {rmse}')
#print(f'R2 SCORE: {r2_score}')
